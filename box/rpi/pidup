#!/bin/bash -x
# fast copy (using dd) IIAB to a second SD card in an USB adapter
# tiny core notes: gawk, bash, e2fsprogs, dialog, gparted

#############   Set up variables ############
export TEXTDOMAIN=piconf

prefix=/usr/local
exec_prefix=${prefix}
bindir=${exec_prefix}/bin
sbindir=${exec_prefix}/sbin
PARTITION=/dev/sdb1
SRC=/dev/mmcblk0
version=0.1
USE_NLS=no

# i18n stuff
if test "$USE_NLS" = "yes" && type -p gettext > /dev/null; then
  xecho() {
    gettext -s "$*"
  }
else
  xecho() {
    echo "$*"
  }
  gettext() {
    echo -n "$*"
  }
fi
xmsg() {
  msg=$(gettext "$1")
  shift
  printf "$msg" $*
}

# Check for root privileges
if [ `id -u` -ne 0 ]; then
  xecho "You must be root to use this script."
  exit 1
fi

#########   User interface command line stuff #########
usage() {
    xecho "IIAB SD Card Duplicator"
    echo "  version $version"
    xecho "usage: pidup [options]
  -d|--dest      Destination USB stick
  -h|--help      what you're reading"
}

while (( $# )) ; do
    case "$1" in
    -h|--help)
         usage; exit 0 ;;
    -d|--dest)
         PARTITION="$2"; shift 2;;
    -L|--log)
         LOGFILE="$2"; shift 2;;
    *) usage ; exit 1 ;;
    esac
done

# Check for dialog, whiptail, gdialog, awk, ... ?
if type -p whiptail > /dev/null; then
    DIALOG=whiptail
else
  if type -p dialog > /dev/null; then
    dialog_wrapper() {
      X1="$1"
      X2="$2"
      if [ $1 = --yesno ]; then
        X3=`expr $3 + 2`
      else
        X3=$3
      fi
      shift 3
      dialog "$X1" "$X2" $X3 "$@"
    }
    DIALOG=dialog_wrapper
  else
    xecho "Error, dialog or whiptail not found."
    exit 1
  fi
fi
if type -p awk > /dev/null; then :
else
  xecho "Error, awk not found. Can't continue."
  exit 1
fi


#########    Error check devices #########
# first, what size output device is wanted?
# Some definitions -- hopefully smaller than any purchased device
sector=512
mbyte=2048 #sectors/megabyte
sd16GB=15900000000
sd32GB=31900000000
sd64GB="63900000000"
sd128GB="12790000000"
P1_SIZE=40

# clip off the partition if provided
DEVICE=${PARTITION:0:-1}
if [ ! -e "$DEVICE" ]; then
   DEVICE=$PARTITION
fi
DEST=$DEVICE

DEST_SIZE=$(fdisk -l $DEVICE | grep Disk | cut -d" " -f 5)
echo dest size: $DEST_SIZE

erase_block=8192   # size in sectors
SRC_SIZE=$(fdisk -l $SRC | grep Disk | cut -d" " -f 5)
echo $SRC_SIZE

MIN_SIZE=`resize2fs -M -P $SRC`
echo minimum source size is $MIN_SIZE

# if the destination is much larter than source, let user select the smaller size
SIZE_DIFF=$(expr $DEST_SIZE - $SRC_SIZE)
echo size_diff $SIZE_DIFF
CHOSEN_SIZE=$DEST_SIZE
if ! $(expr $SIZE_DIFF \> 8000000000); then
   MENU_TITLE=$(gettext "Choose SD Size")
   FUN=$(whiptail --title "Choose the size of the output SD card" --backtitle "Choose SD size" --menu "Choose SD Size" 17 80 4  --cancel-button Finish --ok-button Select \
           "1 128 GB SD card" "Will verify that space exists" \
           "2 64 GB SD card" "" \
           "3 32 GB SD card" "" \
           "4 16 GB SD card" "" \
           3>&1 1>&2 2>&3)

       RET=$?
       if [ $RET -eq 0 ]; then
           case "$FUN" in
             1\ *) CHOSEN_SIZE=$sd128GB ;;
             2\ *) CHOSEN_SIZE=$sd64GB ;;
             3\ *) CHOSEN_SIZE=$sd32GB ;;
             4\ *) CHOSEN_SIZE=$sd16GB ;;
           esac
       fi
       if [ $(expr $CHOSEN_SIZE \< $SRC_SIZE) -eq 1 ]; then
            CHOSEN_SIZE=$SRC_SIZE
       fi
fi

BOOT_DEV=$(mount | grep boot | cut -d' ' -f1)
BOOT_DEV=${BOOT_DEV:0:-1}
#echo boot_dev=$BOOT_DEV

# check source and destination exist
if [ ! -e "$DEST" ] || [ ! -e $STC ]; then  
    title=$(gettext "Result")
    msg=$(gettext "Source $SRC or Destination $DEST not found")
    echo $msg
    whiptail --title "$title"  --msgbox "$msg" 20 60 1
    exit 1
fi

# check source is not opened as running linux OS
if [ "$BOOT_DEV" = "$DEST" ]; then
    title=$(gettext "Error")
    msg=$(gettext "Destination cannot be the BOOT disk .. quitting")
    echo $msg
    whiptail --title "$title"  --msgbox "$msg" 20 60 1
    exit 1
fi

# Check that a dd copy of source will fit on destination
if [ $(expr "$DEST_SIZE" \< "$SRC_SIZE") -eq 1 ] ; then
  title=$(gettext "Warning")
  msg=$(gettext "Destination SD card ($DEST_SIZE) is smaller than source ($SRC_SIZE) ... Quitting")
  $DIALOG --title "$title"  --msgbox "$msg" 10 60 1
  # will eventually try to shrink the src -- for now just exit
  exit 1
fi

############     Partition the output device ###############
START_P1=$erase_block
END_P1=$(( $START_P1 + $P1_SIZE * $mbyte ))

START_P2=$(( ($END_P1 / $erase_block + 1) * $erase_block ))
END_P2=$(( ($CHOSEN_SIZE / $sector ) ))
echo
echo $START_P1   $END_P1
echo $START_P2   $END_P2
dsize=$(($END_P2 * $sector))
echo will format destination to "$dsize" bytes

# last minute check
if [ $(expr $dsize \< $SRC_SIZE) -eq 1 ]; then
   echo "halt everything"
   echo "trying to write $SRC_SIZE to device that will be $dsize"
   exit 1
fi

comment_out(){
# write the new partition table
umount /media/usb*

fdisk "$DEVICE" << EOF
d
d
n
p
$START_P1
$END_P1
n
p
$START_P2
$END_P2
t
1
c
t
2
83
w
EOF

partprobe $DEVICE
mkdosfs -n boot "${DEVICE}1"
mke2fs -t ext2 -L IIAB "${DEVICE}2"

}

# figure out how many erase_blocks to write
WRITE_COUNT=$( expr $END_P2 / $erase_block )

(dd status=progress if="$SRC" of="$DEVICE") 2>&1 | \
   stdbuf -o0 awk -v RS='\r' "/copied/ { printf(\"%0.f\n\", \$1 / $dsize * 100) }" | \
   whiptail --title "Image writing" --gauge "Burning the image on the SD card..." 20 78 0

