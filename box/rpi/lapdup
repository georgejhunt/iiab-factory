#!/bin/bash -x
# fast copy (using dd) IIAB to an image, or a  second SD card

# Bring in useful functions
source truncate.sh

#############   Set up variables ############
#  All size variables kept in bytes
export TEXTDOMAIN=piconf


# i18n stuff
if test "$USE_NLS" = "yes" && type -p gettext > /dev/null; then
  xecho() {
    gettext -s "$*"
  }
else
  xecho() {
    echo "$*"
  }
  gettext() {
    echo -n "$*"
  }
fi
xmsg() {
  msg=$(gettext "$1")
  shift
  printf "$msg" $*
}

# Check for root privileges
if [ `id -u` -ne 0 ]; then
  xecho "You must be root to use this script."
  exit 1
fi

#########   User interface command line stuff #########
usage() {
    xecho "IIAB SD Card Duplicator"
    echo "  version $version"
    xecho "usage: pidup [options]
  -d|--dest      Destination USB stick
  -h|--help      what you're reading"
}

while (( $# )) ; do
    case "$1" in
    -h|--help)
         usage; exit 0 ;;
    -d|--dest)
         PARTITION="$2"; shift 2;;
    *) usage ; exit 1 ;;
    esac
done

initialize(){
   prefix=/usr/local
   exec_prefix=${prefix}
   bindir=${exec_prefix}/bin
   sbindir=${exec_prefix}/sbin
   SRC_DEVICE=/dev/mmcblk0
   SRC_PARTITION=/dev/mmcblk0p2
   DUPVERSION=0.1
   USE_NLS=no
   # mount all the partitions so that df can return usage
   for dev in `ls /mnt`; do
     if test "$dev" = "sr0"; then continue; fi
     if ! grep $dev /etc/mtab > /dev/null; then
        mount /dev/$dev /mnt/$dev 2>&1 > /dev/null
     fi
   done
   erase_block=8192   # size in sectors
   export TERM=xterm
}

checkSudo() {
  if ((EUID != 0)); then
    echo "Granting root privileges for $scriptName."
    if [[ -t 1 ]]; then
      sudo "$0" "$@"
    else
      exec 1>output_file
      gksu "$0" "$@"
    fi
    exit
  fi
}

################  Choose Source  ###################
selectSource(){
   echo > /tmp/devices
   df -hT | grep mnt | grep -v -e Disk -e sdb | sort >> /tmp/devices

   cat << EOF > /tmp/src
MENU_TITLE=$(gettext "\"Choose Source -- Probably a mmcblk device of type ext4 \n\n\n \\
device            type        size      used       free     %       mounted to\n \\
=================================================================================\"")
SRC=\$(dialog --title "\$PAGE_TITLE" --ok-label "Select" --default-item "/dev/mmcblk0p2  " \\
 --menu "\$MENU_TITLE" 20 90 5    \\
EOF

   while read line
   do
    awk ' { printf("\"%-16s\"  \"%-5s %10s %10s %10s %6s    %-15s\"  \\\n",$1,$2,$3,$4,$5,$6,$7);}'
   done < /tmp/devices >> /tmp/src
   echo  3\>\&1 1\>\&2 2\>\&3\) >> /tmp/src
   source /tmp/src
   if test $? -ne 0 ; then exit 1; fi
   SRC_PARTITION=$(echo $SRC | awk '{print $1}')
   SRC_DEVICE=${SRC_PARTITION:0:(-2)}
   echo $SRC
}

####  Get the minimun size that Destination must hold
getSourceMinSize(){
   # but first warn user that getting minimun source size will take a while
   delay=$(gettext "Using e2fsck to check the minimum size of $SRC_PARTITION, This may take some time. . .")
   dialog --infobox "$delay" 7 60

   MIN_SIZE=$( min_device_size "$SRC_PARTITION" )  # keep it all in bytes
   #echo minimum source size is $MIN_SIZE
   MIN_SIZE_TEXT=$(gettext "Data on Source Sd card occupies $(bytesToHuman "$MIN_SIZE")")
   echo $MIN_SIZE
}

################  Choose Destination  ###################
selectDestination(){
   # the source should not be listed as a potential destination
   ignore=${SRC:0:9}
   echo > /tmp/devices1
   df -hT | grep mnt | grep -v -e Disk -e sdb -e $ignore| sort >> /tmp/devices1

   cat << EOF > /tmp/dest
      PAGE_TITLE=$(gettext "\"Choose Destination\"")
      MENU_TITLE=$(gettext "\"Choose Destination -- Either hard disk of type ntfs, or another SD Card \n \\
      \$MIN_SIZE_TEXT  \n\n\n \\
      device            type        size      used       free     %       mounted to\n \\
   =================================================================================\"")
      DEST=\$(dialog --title "\$PAGE_TITLE" --clear --ok-label "Select" --default-item "/dev/mmcblk0p2  " \\
       --menu "\$MENU_TITLE" 20 90 25    \\
EOF

   while read line
   do
    awk ' { printf("\"%-16s\"  \"%-5s %10s %10s %10s %6s    %-15s\"  \\\n",$1,$2,$3,$4,$5,$6,$7);}'
   done < /tmp/devices1 >> /tmp/dest
   echo  3\>\&1 1\>\&2 2\>\&3\) >> /tmp/dest
   source /tmp/dest
   if test $? -ne 0 ; then exit 1; fi
   DEST=$(echo "$DEST" | awk '{print $1;}')    # trim trailing spaces
   # currently, the decision on whether destination is a SD card is based upon "mmcblk"
   DEST_PARTITION=$(echo $DEST | awk '{print $1}')
   if test $(echo $DEST | grep mmcblk); then
      DEST_DEVICE=${DEST_PARTITION:0:(-2)}
      dest_is_sd=True
   else
      dest_is_sd=False
      DEST_DEVICE=${DEST_PARTITION:0:(-1)}
      DEST_FREE=$(/usr/local/bin/df  | grep $DEST_PARTITION | awk '{print $4}')
      DEST_FREE=$(expr $DEST_FREE \* 1024)
   fi
      
   DEST_SIZE=$(fdisk -l $DEST_DEVICE | grep Disk | cut -d" " -f 5)
   echo $DEST_SIZE
}

selectTruncate(){
   SRC_SIZE=$(fdisk -l $SRC_PARTITION | grep Disk | cut -d" " -f 5)
   #echo $SRC_SIZE
   # if the destination is much larger than source, let user select the smaller size
   SIZE_DIFF=$(expr $DEST_SIZE - $SRC_SIZE)
   # echo size_diff $SIZE_DIFF

   QUESTION=$(gettext "Do you want to shrink the Source, even if it will fit without this step?")
   QUERY=$(gettext "Minimize Source?")
   dialog --title "$QUERY" --yesno "$QUESTION" 6 80
   if test $? -eq 0; then
     CHOSEN_SIZE=$MIN_SIZE
   else
     CHOSEN_SIZE=$SRC_SIZE
   fi
}
dummy(){
#   reminder expr returns 1 if true
   if [ $(expr $SIZE_DIFF \> 8000000000) -eq 1 ]; then
      MENU_TITLE=$(gettext "Data on Source Sd card occupies $(bytesToHuman "$MIN_SIZE")")
      FUN=$(dialog --title "Choose the size of the output SD card" --backtitle "Choose SD size" \
      --menu "Choose SD Size" 17 80 5  --cancel-button Finish --ok-button Select \
        "1 128 GB SD card" "Will verify that space exists" \
        "2 64 GB SD card" "" \
        "3 32 GB SD card" "" \
        "4 16 GB SD card" "" \
        "5 Smallest possible" "Written to available SD" \
        3>&1 1>&2 2>&3)

      RET=$?
      if [ $RET -eq 0 ]; then
        case "$FUN" in
          1\ *) CHOSEN_SIZE=$sd128GB ;;
          2\ *) CHOSEN_SIZE=$sd64GB ;;
          3\ *) CHOSEN_SIZE=$sd32GB ;;
          4\ *) CHOSEN_SIZE=$sd16GB ;;
          5\ *) CHOSEN_SIZE=$MIN_SIZE ;;
        esac
      fi
      # Can't choose a size where the data will not fit
      if [ $(expr $CHOSEN_SIZE \< $MIN_SIZE) -eq 1 ]; then
         CHOSEN_SIZE=$MIN_SIZE
      fi
   fi
}
################### Identify the copy  #####################

# Fetch username and copy identifier
createFilename(){
   # generate mount specifiers
   SRC_PARTITION_NIBBLE=${SRC_PARTITION:5}
   SRC_MNT=/mnt/$SRC_PARTITION_NIBBLE
   DEST_PARTITION_NIBBLE=${DEST:5}
   DEST_MNT=/mnt/$DEST_PARTITION_NIBBLE
   TITLE=$(gettext "Please identify this copy")
   MSG=$(gettext "Requires name and short identifying label")
   exec 3>&1
   DATA=$(dialog --output-separator ":" --title "$TITLE" --form "$MSG" 10 80 3 \
         "Name:" 1 1 "" 1 7 15 0 \
         "Label:" 2  1 "" 2 7 16 0 \
         2>&1 1>&3)
   if test $? -ne 0 ; then exit 1; fi
   NAME=$(echo $DATA | awk -F: '{print $1;}')
   LABEL=$(echo $DATA | awk -F: '{print $2;}')
   # replace spaces with underscores
   NAME=$(echo $NAME | sed 's/ /_/g')
   LABEL=$(echo $LABEL | sed 's/ /_/g')
   iiab_label $SRC_PARTITION $NAME $LABEL
   TARGET=$DEST_MNT/$(cat /tmp/identifier_filename)
   echo $TARGET
}

# check source and destination exist
existCheck(){
   if [ "$dest_is_sd" = "True" ]; then
     write_to="$DEST_DEVICE"
   else
     write_to="$DEST_PARTITION"
   fi
   if [ ! -e "$write_to" ] || [ ! -e "$SRC_DEVICE" ]; then  
       title=$(gettext "Result")
       msg=$(gettext "Source $SRC_DEVICE or Destination $write_to not found")
       dialog --title "$title"  --msgbox "$msg" 20 60
       exit 1
   fi
}

# check source is not host tree for running linux OS
verifySourceNotBoot(){
   BOOT_DEV=$(mount | grep boot | cut -d' ' -f1)
   BOOT_DEV=${BOOT_DEV:0:-1}
   #echo boot_dev=$BOOT_DEV
   if [ "$BOOT_DEV" = "$SRC" ]; then
       title=$(gettext "Error")
       msg=$(gettext "Source cannot be the BOOT disk .. quitting")
       echo $msg
       dialog --title "$title"  --msgbox "$msg" 10 60 
       exit 1
   fi
}

# Check that a dd copy of source will fit on destination
willFit?(){
   if [ "$dest_is_sd" = "True" ]; then
      output_size="$DEST_SIZE"
   else
      output_size="$DEST_FREE"
   fi
   if [ $(expr "$CHOSEN_SIZE" \> "$output_size") -eq 1 ] ; then
     msg=$(gettext "The source $SRC_PARTITION will not fit on the destination $DEST_PARTITION")
     title=$(gettext "Fatal ERROR . . . Quitting")
     dialog --title "$title"  --msgbox "$msg" 10 70 
     exit 1
   elif [ $(expr "$CHOSEN_SIZE" \< "$output_size") -eq 1 ] ; then
     echo Chosen size:$CHOSEN_SIZE   output size:$outpus_size
     msg=$(gettext "Truncation of Source is required. \n \
      Source bytes: $CHOSEN_SIZE.   Destination bytes: $DEST_SIZE \n \
      OK to proceed?")
     human=$(bytesToHuman $CHOSEN_SIZE)
     title=$(gettext "Proceed with resizing Source to $human? \
     Both Source and Destination will be set to expand upon reboot")
     dialog --title "$title"  --yesno "$msg" 10 70 
     if test $? -ne 0 ; then exit 1; fi
   fi
}
#####################  Confirm Choices     ###########################
echo optional
optionalTruncation(){
   if [ "$SRC_SIZE" = "$CHOSEN_SIZE" ]; then
      SOURCE_TRUNCATE=NO
   else
      SOURCE_TRUNCATE=YES
   fi

   if [ "$dest_is_sd" = "True" ]; then
      DEST_INFO=$(gettext "Destination device: $DEST_DEVICE")
   else
      DEST_INFO=$(gettext "Destination filename: $TARGET")
   fi

   SRC_INFO=$(gettext "Source device: "$SRC_DEVICE \
   Source will be truncated before copy: $SOURCE_TRUNCATE" )
   TITLE=$(gettext "Please Confirm the following COPY operation" )
   MSG="$SOURCE_INFO\n$DEST_INFO"
   dialog --Title "$TITLE" --yesno "$MSG" 7 70
   if test $? -ne 0; then exit 1; fi
}
#####################  Final Sanity Check  ###########################
echo final
finalVerificatioon(){
  title=$(gettext "Final Verification")
  msg=$(gettext "Source: $SRC")
  #dialog --title "$title" --msgbox "$msg" 20 70 1
  ret=$( truncate $SRC_PARTITION $CHOSEN_SIZE )
  if test $? -ne 0 ; then exit 1; fi
}

####################### copy the data #################################
echo ddcopy
ddCopy(){
   # figure out how many erase_blocks to write
   dsize=$CHOSEN_SIZE
   WRITE_COUNT=$( expr $CHOSEN_SIZE / $erase_block )

   #dd status=progress if="$SRC" of="$DEVICE" bs=$erase_block count=$WRITE_COUNT 2>progress &

   # now read the progress file and update the gauge
   lastcopied=
   # debug messages upset guage
   set +x
   while true; do
      sleep 5
      copied=`cat progress | tr '\r' '\n' | tail -n1 | awk '{print $1}'`
      if [ "$copied" = "$lastcopied" ]; then break; fi
      lastcopied=$copied
      percent=$(expr $copied \* 100 / $dsize) 
      line=`cat progress | tr '\r' '\n' | tail -n1 `
      echo XXX
      echo $percent
      echo $line
      echo XXX 
   done | dialog --title "Image writing" --gauge "Burning the image on the SD card..." 10 78 0
}
echo cleanup
cleanup(){
   umount /mnt/SRC_DEVICE
   if [ "$dest_is_sd" = "True" ]; then
      umount $TARGET
   fi
}

echo main
main(){
   initialize "$@"
   checkSudo "$@"
   selectSource
   verifySoureNotBoot
   selectDestination
   if [  "$dest_is_sd" != "True" ]; then
    createFilename
   fi
   selecTruncate
   willFit?
   finalVerification
#   ddCopy
}

trap cleanup EXIT INT TERM

main "$@"
