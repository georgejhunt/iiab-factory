#!/bin/bash -x
# copy contents of IIAB to a second SD card in an USB adapter
# notes to tce list gawk, bash, e2fsprogs, dialog, gparted

#############   Set up variables ############
export TEXTDOMAIN=piconf

prefix=/usr/local
exec_prefix=${prefix}
bindir=${exec_prefix}/bin
sbindir=${exec_prefix}/sbin
version=0.1
USE_NLS=no

# i18n stuff
if test "$USE_NLS" = "yes" && type -p gettext > /dev/null; then
  xecho() {
    gettext -s "$*"
  }
else
  xecho() {
    echo "$*"
  }
  gettext() {
    echo -n "$*"
  }
fi
xmsg() {
  msg=$(gettext "$1")
  shift
  printf "$msg" $*
}

# Check for root privileges
if [ `id -u` -ne 0 ]; then
  xecho "You must be root to use this script."
  exit 1
fi

#########   User interface command line stuff #########
usage() {
    xecho "IIAB SD Card Duplicator"
    echo "  version $version"
    xecho "usage: pidup [options]
  -d|--dest      Destination USB stick
  -h|--help      what you're reading"
}

while (( $# )) ; do
    case "$1" in
    -h|--help)
         usage; exit 0 ;;
    -d|--dest)
         PARTITION="$2"; shift 2;;
    -L|--log)
         LOGFILE="$2"; shift 2;;
    *) usage ; exit 1 ;;
    esac
done

# Check for dialog, whiptail, gdialog, awk, ... ?
if type -p whiptail > /dev/null; then
    DIALOG=whiptail
else
  if type -p dialog > /dev/null; then
    dialog_wrapper() {
      X1="$1"
      X2="$2"
      if [ $1 = --yesno ]; then
        X3=`expr $3 + 2`
      else
        X3=$3
      fi
      shift 3
      dialog "$X1" "$X2" $X3 "$@"
    }
    DIALOG=dialog_wrapper
  else
    xecho "Error, dialog or whiptail not found."
    exit 1
  fi
fi
if type -p awk > /dev/null; then :
else
  xecho "Error, awk not found. Can't continue."
  exit 1
fi


#########    Error check devices #########
SRC_SIZE=$(fdisk -l /dev/mmcblk0 | grep Disk | cut -d" " -f 5)
#echo $SRC_SIZE

# clip off the partition if provided
DEVICE=${PARTITION:0:-1}
if [ ! -e "$DEVICE" ]; then
   DEVICE=$PARTITION
fi
DEST=$DEVICE

BOOT_DEV=$(mount | grep boot | cut -d' ' -f1)
BOOT_DEV=${BOOT_DEV:0:-1}
#echo boot_dev=$BOOT_DEV
if [ ! -e "$DEST" ]; then  
    title=$(gettext "Result")
    msg=$(gettext "Destination $DEST not found")
    echo $msg
    whiptail --title "$title"  --msgbox "$msg" 20 60 1
    exit 1
fi
if [ "$BOOT_DEV" = "$DEST" ]; then
    title=$(gettext "Error")
    msg=$(gettext "Destination cannot be the BOOT disk .. quitting")
    echo $msg
    whiptail --title "$title"  --msgbox "$msg" 20 60 1
    exit 1
fi

DEST_SIZE=$(fdisk -l $DEVICE | grep Disk | cut -d" " -f 5)
#echo dest size: $DEST_SIZE
if expr "$DEST_SIZE" \< "$SRC_SIZE" ; then
  title=$(gettext "Warning")
  msg=$(gettext "Destination SD card is smaller than source .. Quitting")
  $DIALOG --title "$title"  --msgbox "$msg" 10 60 1
  exit 1
fi

############     Partition the output device ###############
# Calculate the limits of the two partitions
sector=512
mbyte=2048 #sectors/megabyte
erase_block=8196
sd16GB=15900000000
sd32GB=31900000000
sd64GB="63900000000"
sd128GB="12790000000"
P1_SIZE=40

 FUN=$(whiptail --title "Choose the size of the output SD card" --backtitle "Choose SD size" --menu "Setup Options" 17 80 4  --cancel-button Finish --ok-button Select \
        "1 128 GB SD card" "Will verify that space exists" \
        "2 64 GB SD card" "" \
        "3 32 GB SD card" "" \
        "4 16 GB SD card" "" \
        3>&1 1>&2 2>&3)

    RET=$?
    if [ $RET -eq 0 ]; then
        case "$FUN" in
          1\ *) DEST_SIZE=$128GB ;;
          2\ *) DEST_SIZE=$64GB ;;
          3\ *) DEST_SIZE=$32GB ;;
          4\ *) DEST_SIZE=$16GB ;;
        esac
    if

START_P1=$(( $erase_block ))
END_P1=$(( $START_P1 + $P1_SIZE * $mbyte ))

START_P2=$(( ($END_P1 / $erase_block + 1) * $erase_block ))
END_P2=$(( ($DEST_SIZE / $sector ) - 100 ))
echo
echo $START_P1   $END_P1
echo $START_P2   $END_P2
exit 1


cat << EOF > fdisk "$DEVICE"
d
d
d
n
p
8192
110592
n
p
118785
$END
w
EOF
