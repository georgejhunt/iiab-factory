#!/bin/bash -x
# fast copy (using dd) IIAB to an disk image, or a  second SD card; optionally minify image

# Author: george hunt <georgejhunt.gmail.com> https://github.com/georgejhunt/iiab-factory
copyright 2018 by George Hunt
License: GPL Version 2
# Ideas and structure attribution:   jules randolph <jules.sam.randolph@gmail.com> https://github.com/jsamr/bootiso

# Bring in useful functions
source truncate.sh

#############   Set up variables ############
#  All size variables kept in bytes
export TEXTDOMAIN=piconf
declare SRC_DEVICE=/dev/mmcblk0
declare SRC_DEVICE_HOLDS
declare SRC_PARTITION=/dev/mmcblk0p2
declare SRC_PARTITIONED_SIZE       # total bytes specified in partition table
declare SRC_FILE_SIZE
declare DEST_DEVICE=/dev/sda
declare DEST_DEVICE_SIZE
declare DEST_PARTITION=/dev/sda1
declare DEST_PARTITION_SIZE
declare LAPTOP_DEVICE=sda
declare LAPTOP_MOUNT=/mnt/sda1
declare LAPTOP_DIR=/mnt/sda1/iiab
declare TINY_CORE_NIBBLE=sdb       # the Tiny Core Linux boot device
declare BOOT_DEVICE=/dev/sdb       # the Tiny Core Linux boot device
##############   Inputs to shared functions  ##########
declare WILLITFIT_SRC_SIZE
declare WILLITFIT_SRC_SPEC
declare WILLITFIT_DEST_SIZE
declare WILLITFIT_DEST_SPEC
declare DD_SRC
declare DD_DEST
declare PERSIST_STATE_FILE=/opt/duper/state

# Persistence will be maintained for
# User name, label, Laptop partition used by duper,

# i18n stuff
if test "$USE_NLS" = "yes" && type -p gettext > /dev/null; then
  xecho() {
    gettext -s "$*"
  }
else
  xecho() {
    echo "$*"
  }
  gettext() {
     echo -n "$*"
  }
fi
xmsg() {
  msg=$(gettext "$1")
  shift
  printf "$msg" $*
}

#########   User interface command line stuff #########
usage() {
    xecho "IIAB SD Card Duplicator"
    echo "  version $version"
    xecho "usage: $0 [options]
  -d|--dest      Destination USB stick
  -h|--help      what you're reading"
}

while (( $# )) ; do
    case "$1" in
    -h|--help)
         usage; exit 0 ;;
    -d|--dest)
         PARTITION="$2"; shift 2;;
    *) usage ; exit 1 ;;
    esac
done

getDevicesList() {
   declare -a devices 
   # pass the array by reerence
   local -n devicesList=$1
   mapfile -t devices < <(lsblk -o NAME,TYPE | grep  disk | awk '{print $1}')
   echo ${devices[@]}
   for device in "${devices[@]}" ; do
      if [ "$device" = "sdb" ]; then continue; fi
      if [ "$device" = "zram0" ]; then continue; fi
      devicesList+=("$device")
   done
}

initialize(){
   prefix=/usr/local
   exec_prefix=${prefix}
   bindir=${exec_prefix}/bin
   sbindir=${exec_prefix}/sbin
   DUPVERSION=0.1
   USE_NLS=no
   # mount all the partitions so that df can return usage
   for dev in `ls /mnt`; do
     if test "$dev" = "sr0"; then continue; fi
     if ! grep $dev /etc/mtab > /dev/null; then
        mount /dev/$dev /mnt/$dev 2>&1 > /dev/null
     fi
   done
   BOOT_DEVICE=$(grep /home /etc/mtab | awk '{print $1}')
   BOOT_DEVICE=${BOOT_DEVICE:0:8}
   TINY_CORE_NIBBLE=${BOOT_DEVICE:5}
   export TERM=xterm
   mkdir -p /tmp/duper
   mkdir -p /opt/duper
}

checkSudo() {
  if ((EUID != 0)); then
    echo "Granting root privileges for $scriptName."
    if [[ -t 1 ]]; then
      sudo "$0" "$@"
    else
      exec 1>output_file
      gksu "$0" "$@"
    fi
    exit
  fi
}

isUSB() {
  udevadm info --query=symlink --name="$1" | grep usb
}

################  Choose Source  ###################
selectSource(){
   declare -a deviceList
   echo > /tmp/duper/src
   cat << EOF > /tmp/duper/src
TITLE=$(gettext "\"CHOOSE SOURCE SD CARD-$OBJECTIVE\"")
MSG=$(gettext "\"Choose Source -- Probably a mmcblk device \n\n\n \\
device            type        size      used       free     %       mounted to\n \\
=================================================================================\"")
SRC=\$(dialog --title "\$TITLE" --ok-label "Select" --default-item "mmcblk0    " \\
 --menu "\$MSG" 20 90 5    \\
EOF
   devices=$(getDevicesList $deviceList)
   (for d in $devices; do
      if [ "$d" = "$LAPTOP_DEVICE" ]; then continue; fi
      if [ "$d" = "$TINY_CORE_NIBBLE" ]; then continue; fi
      if [ "$d" = "zram0" ]; then continue; fi
      size=$(fdisk -l /dev/$d | grep Disk | grep /dev/$dd | awk '{print $3}')
      units=$(fdisk -l /dev/$d | grep Disk | grep /dev/$dd | awk '{print $4}')
      echo "$d $size $units" | awk '{printf("\"%-10s \"    \"%-6s %-6s\" \\\n",$1,$2,$3)}'
   done ) >> /tmp/duper/src
   echo  "3>&1 1>&2 2>&3)" >> /tmp/duper/src
   echo "rtn=\$?" >> /tmp/duper/src
   echo "echo \$SRC" >> /tmp/duper/src
   echo "return \$rtn" >> /tmp/duper/src
   SRC=$(source /tmp/duper/src)
   if test $? -ne 0 ; then 
      error_msg=$SRC
      return 99
   fi
   SRC_NIBBLE=$(echo "$SRC" | awk '{print $1}')
   SRC_DEVICE=/dev/$SRC_NIBBLE
   SRC_DEVICE_HOLDS=$(fdisk -l "$SRC_DEVICE" | grep Disk | awk '{print $5;}')
   echo $SRC
   SRC_SIZE=$(fdisk -l "$SRC_DEVICE" | grep Linux | awk '{print $4;}')
   SRC_SIZE=$(expr $SRC_SIZE \* 512)
   CHOSEN_SIZE=$SRC_SIZE
   echo $SRC_SIZE
   return 0
}

####  Get the minimun size that Destination must hold
getSourceMinSize(){
   # but first warn user that getting minimun source size will take a while
   delay=$(gettext "Using e2fsck to check the minimum size of $SRC_PARTITION, This may take some time. . .")
   dialog --infobox "$delay" 7 60

   MIN_SIZE=$( min_device_size "$SRC_PARTITION" )  # keep it all in bytes
   #echo minimum source size is $MIN_SIZE
   MIN_SIZE_TEXT=$(gettext "Data on Source Sd card occupies $(bytesToHuman "$MIN_SIZE")")
   echo $MIN_SIZE
   return 0
}

################  Choose Destination  ###################
selectSDDestination(){
   echo > /tmp/duper/sddevice
   cat << EOF > /tmp/duper/sddevice
TITLE=\$(gettext "\"Choose SD card as Destination\"")
MSG=\$(gettext "\"If you have not removed the source SD card, and replaced it with a blank SD, \ndo not select mmcblk0.. \n\n\n \\
device            size        mounted to\n \\
=================================================================================\"")
DEST=\$(dialog --title "\$TITLE" --clear --ok-label "Select"  \\
 --menu "\$MSG" 20 90 25    \\
EOF
   (lsblk -o NAME,SIZE,TYPE  | grep disk | grep -v -e sdb -e sda -e zram0 | \
      awk '{ printf("\"%-16s\"  \" %-10s\"  \\\n",$1,$2);}' ) >> /tmp/duper/sddevice
   echo  3\>\&1 1\>\&2 2\>\&3\) >> /tmp/duper/sddevice
   echo "echo \$DEST" >> /tmp/duper/sddevice
   error_msg=$(source /tmp/duper/sddevice)
   if test $? -ne 0 ; then return 99; fi
   DEST_NIBBLE=$(echo "$error_msg" | awk '{print $1}')
   error_msg=
   DEST_DEVICE=/dev/$DEST_NIBBLE
   DEST_SIZE=$(fdisk -l $DEST_DEVICE | grep Disk | cut -d" " -f 5)
   WILLITFIT_DEST_SIZE=$DEST_SIZE
}

selectDevice(){
   declare -a deviceList
   # the source should not be listed as a potential destination
   echo > /tmp/duper/copyto
   cat << EOF > /tmp/duper/copyto
      TITLE=$(gettext "\"Choose Destination -- $OBJECTIVE\"")
      MSG=$(gettext "\"Choose Destination -- Either hard disk partition of type ntfs, or another SD Card \n \\
      \$MIN_SIZE_TEXT  \n\n\n \\
                               device      size   \n \\
   =================================================================================\"")
      DEST=\$(dialog --title "\$TITLE" --clear --ok-label "Select"  \\
       --menu "\$MSG" 20 90 25    \\
EOF

   devices=$(getDevicesList $deviceList)
   (for d in $devices; do
      if [ "$d" = "$SRC_DEVICE" ]; then continue; fi
      if [ "$d" = "$TINY_CORE_NIBBLE" ]; then continue; fi
      if [ "$d" = "zram0" ]; then continue; fi
      if [ "$d" = "$SRC_NIBBLE" ]; then continue; fi
      size=$(fdisk -l /dev/$d | grep Disk | grep /dev/$dd | awk '{print $3}')
      units=$(fdisk -l /dev/$d | grep Disk | grep /dev/$dd | awk '{print $4}')
      echo "$d $size $units" | awk '{printf("\"%-10s \"    \"%-6s %-6s\" \\\n",$1,$2,$3)}'
   done ) >> /tmp/duper/copyto
   echo  "3>&1 1>&2 2>&3)" >> /tmp/duper/copyto
   source /tmp/duper/copyto
   if test $? -ne 0 ; then return 99; fi
   DEST=$(echo "$DEST" | awk '{print $1;}')    # trim trailing spaces
   echo $DEST
}

selectDestination(){
   DEST=$(selectDevice $OBJECTIVE)
   DEST_DEVICE=/dev/$DEST
   DEST_SIZE=$(fdisk -l $DEST_DEVICE | grep Disk | cut -d" " -f 5)
   LAPTOP_DEVICE=/dev/$DEST
   LAPTOP_MOUNT=/mnt/$DEST
   LAPTOP_DIR=$LAPTOP_MOUNT/iiab
   dest_is_file=
   echo $DEST_DEVICE | grep $LAPTOP_DEVICE > /dev/null
   # is 
   if [ $? -eq 0 ];then
      dest_is_file=true
      # pick the partition
      DEST_PARTITION=$(selectPartition $DEST_DEVICE $OBJECTIVE)
      DEST_PARTITION_MOUNT=/mnt/${DEST_PARTITION:5}
      if [ $? -ne 0 ]; then return 99; fi
      # trim the response
      DEST_PARTITiON=$(echo $DEST_PARTITION | awk '{print $1}')
      DEST_FREE=$(/usr/local/bin/df -l | grep $DEST_PARTITION | awk '{print $4}')
      # coreutils tce make the above work - really required for dd progress
   #   DEST_FREE=$(/bin/df  | grep $DEST_PARTITION | awk '{print $4}')
      DEST_FREE=$(expr "$DEST_FREE" \* 1024)
   fi
}

selectTruncate(){
   # if the destination is much larger than source, let user select the smaller size
   SIZE_DIFF=$(expr $DEST_SIZE - $SRC_SIZE)
   # echo size_diff $SIZE_DIFF

   QUESTION=$(gettext "Do you want to shrink the Source, even if it will fit without this step?")
   QUERY=$(gettext "Minimize Source?")
   dialog --title "$QUERY" --yesno "$QUESTION" 6 80
   if test $? -eq 0; then
      CHOSEN_SIZE=$MIN_SIZE
   else
      CHOSEN_SIZE=$SRC_SIZE
   fi
   return 0
}

################### Identify the copy  #####################

# Fetch username and appropriate label
createFilename(){
   # generate mount specifiers
   SRC_PARTITION_NIBBLE=${SRC_PARTITION:5}
   SRC_MNT=/mnt/$SRC_PARTITION_NIBBLE
   DEST_MNT=$DEST_PARTITION_MOUNT
   name=
   if [ -f /opt/name ]; then
      name=$(cat /opt/name)
   fi
   label=
   if [ -f /opt/label ]; then
      label=$(cat /opt/label)
   fi
   TITLE=$(gettext "Please identify this copy")
   MSG=$(gettext "Requires your name and short identifying label")
   exec 3>&1
   DATA=$(dialog --output-separator ":" --title "$TITLE" --form "$MSG" 10 80 3 \
         "Name:" 1 1 "$name" 1 7 15 0 \
         "Label:" 2  1 "$label" 2 7 16 0 \
         2>&1 1>&3)
   if test $? -ne 0 ; then return 99; fi
   NAME=$(echo $DATA | awk -F: '{print $1;}')
   LABEL=$(echo $DATA | awk -F: '{print $2;}')
   # replace spaces with underscores
   NAME=$(echo $NAME | sed 's/ /_/g')
   LABEL=$(echo $LABEL | sed 's/ /_/g')
   echo $LABEL > /opt/label
   echo $NAME > /opt/name
   iiab_label $SRC_PARTITION $NAME $LABEL
   TARGET=$DEST_PARTITION_MOUNT/iiab/$(cat /tmp/duper/identifier_filename)
   echo $TARGET > /opt/lapdup_filename
   return 0
}

# check source is not open for running linux OS
verifySourceNotBoot(){
   BOOT_DEV=$(mount | grep -e boot -e rootfs | cut -d' ' -f1)
   BOOT_DEV=${BOOT_DEV:0: (-1)}
   #echo boot_dev=$BOOT_DEV
   if [ "$BOOT_DEV" = "$SRC" ]; then
       title=$(gettext "Error")
       msg=$(gettext "Source cannot be the BOOT disk .. quitting")
       echo $msg
       dialog --title "$title"  --msgbox "$msg" 10 60 
       return 99 
   fi
   return 0
}

# verify that the copy of source will fit on destination
willItFit(){
   if [ $(expr "$WILLITFIT_SRC_SIZE" \> "$WILLITFIT_DEST_SIZE") -eq 1 ] ; then
     MSG=$(gettext "The source $WILLITFIT_SRC_SPEC ($bytesToHuman($WILLITFIT_SRC_SIZE)) \
  will not fit on the destination $WILLITFIT_DEST_SPEC" ($(bytesToHuman($WILLITFIT_DEST_SIZE))))
     TITLE=$(gettext "Fatal ERROR . . . Quitting")
     dialog --title "$TITLE"  --msgbox "$MSG" 10 70 
     return 99 
   fi
   return 0
}
save (){
   if [ $(expr "$CHOSEN_SIZE" \< "$output_size") -eq 1 ] ; then
     echo Chosen size:$CHOSEN_SIZE   output size:$output_size
     msg=$(gettext "Truncation of Source is required. \n \
      Source bytes: $CHOSEN_SIZE.   Destination bytes: $(bytesToHuman output_size) \n \
      OK to proceed?")
     human=$(bytesToHuman $CHOSEN_SIZE)
     title=$(gettext "Proceed with resizing Source to $human? \
     Both Source and Destination will be set to expand upon reboot")
     dialog --title "$title"  --yesno "$msg" 10 70 
     if test $? -ne 0 ; then return 99; fi fi
}
#####################  Confirm Choices     ###########################
optionalTruncation(){
   if [ "$SRC_SIZE" = "$CHOSEN_SIZE" ]; then
      SOURCE_TRUNCATE=NO
   else
      SOURCE_TRUNCATE=YES
   fi

   if [ "$dest_is_usb" = "true" ]; then
      DEST_INFO=$(gettext "Destination device: $DEST_DEVICE")
   else
      DEST_INFO=$(gettext "Destination filename: $TARGET")
   fi

   SRC_INFO=$(gettext "Source device: $SRC_DEVICE \
   Source will be truncated before copy: $SOURCE_TRUNCATE" )
   TITLE=$(gettext "Please Confirm the following COPY operation" )
   MSG="$SOURCE_INFO\n$DEST_INFO"
   dialog --Title "$TITLE" --yesno "$MSG" 7 70
   if test $? -ne 0; then return 99; fi
   return 0
}
#####################  Final Sanity Check  ###########################
finalVerification(){
   if [ "$dest_is_file" != "true" ]; then
      write_to="$DEST_DEVICE"
      output_size="$DEST_SIZE"
   else
      write_to="$TARGET"
      output_size="$DEST_FREE"
   fi
  output_size=$(bytesToHuman $output_size)
  title=$(gettext "Final Verification")
  msg=$(gettext "\n\nSource: $SRC_DEVICE  Bytes to copy: $(bytesToHuman $CHOSEN_SIZE)\n \
                     Source device capacity: $(bytesToHuman $SRC_DEVICE_HOLDS)
  \n\nDestination: $write_to   \nSpace on Destination: $output_size")
  dialog --title "$title" --yesno "$msg" 20 80
  if test $? -ne 0 ; then return 99; fi
}

####################### copy the data #################################
ddCopy(){
   if [ "$dest_is_file" != "true" ]; then
      write_to="$DEST_DEVICE"
   else
      write_to="$TARGET"
      mkdir -p $(dirname $TARGET)
   fi
   # figure out how many 4K blocks to write
   WRITE_COUNT=$( echo "( $CHOSEN_SIZE / 4096 ) + 1" | bc )

   # at boot, the read-only driver loads
   umount $DEST_PARTITION
   mount -t ntfs-3g "$DEST_PARTITION" "$DEST_MNT"
   if [ ! -e fifo ]; then
      mkfifo fifo
   fi
   dd status=progress if="$SRC_DEVICE" of="$write_to" bs=4096 count=$WRITE_COUNT 2>>fifo &

   # now read the fifo and update the gauge
   lastcopied=
   set +x
   while true; do
      sleep 5
      line=$(tail -n1 fifo)
      copied=$(echo $line | awk '{print $1}')
      if [ "$copied" = "$lastcopied" ]; then break; fi
      lastcopied=$copied
      percent=$(expr $copied \* 100 / $CHOSEN_SIZE) 
      echo XXX
      echo $percent
      echo $line
      echo XXX 
   done | dialog --title "Image writing" --gauge "Burning the image on the SD card..." 10 78 0
}

get_nth(){
   index=1
   nth=$1
   shift
   choice_list=$@
   for ch in $choice_list; do
      if [ "$index" = "$nth" ]; then break; fi 
      index=$(( index + 1 ))
   done
   echo $ch
}

selectPartition(){
   local device=$1
   local default=$(persistVariable PREFERRED_PARTITION $device)
   declare -n objective=$2
   if [ ! -z "$default" ]; then
      DEFAULT="--default $default"
   else
      DEFAULT=
   fi
   cat << EOF > /tmp/duper/partition
   TITLE=$(gettext "Select Partition -- $OBJECTIVE")
   MSG=$(gettext "Probably should pick the ntfs partition with the most free space")
   PARTITION=\$(dialog --title "\$TITLE" --clear --ok-label "Select"  $DEFAULT \\
       --menu "\$MSG" 20 90 25    \\
EOF
   (df -hT | grep $device | \
      awk ' { printf("\"%-16s\"  \"%-5s %10s %10s %10s %6s    %-15s\"  \\\n",$1,$2,$3,$4,$5,$6,$7);}' ) \
      >> /tmp/duper/partition
   echo  "3>&1 1>&2 2>&3)" >> /tmp/duper/partition
   source /tmp/duper/partition
   if test $? -ne 0 ; then return 99; fi
   dest_is_file=true
   echo $PARTITION

}

selectImage(){
   # called by selectFile, makeSmaller, deleteImage
   # returns full path selected
   # updates SRC_MOUNT
   local TMP_FILE=$2
   declare -a lookup
   mkdir -p $(dirname $2)
   cat << EOF > "$TMP_FILE"
   CHOICE=\$(dialog --title "\$TITLE" --clear --ok-label "Select"  \\
    --menu "\$MSG" 20 90 25    \\
EOF
   list=$(ls -l $1 | awk '{print $9}')
   index=1
   for f in $list;do
     size=$( ls -lh $1/$f | awk '{print $5}') 
     (printf '\"%-2s\"  \"%-9s %-20s\" \\\n' $index $size $f) >> $2 
     lookup[$index]=$f
     index=$(( $index + 1 ))
   done
   image_list=${lookup[@]}
   echo  3\>\&1 1\>\&2 2\>\&3\) >> $TMP_FILE

   source "$TMP_FILE"
   if test $? -ne 0; then return 99; fi

   # trim the string
   CHOICE=$(echo $CHOICE | awk '{print $1}')
   echo $PART_MOUNT/iiab/$(get_nth $CHOICE $image_list )
   SRC_MOUNT=$PART_MOUNT
}

selectFile(){
   # called by image2SD
   local DEVICE_NIBBLE=$(selectDevice)
   if test $? -ne 0; then return 99; fi
   local DEVICE_MNT=/mnt/$DEVICE_NIBBLE
   local PARTITION=$(selectPartition /dev/$DEVICE_NIBBLE)
   if test $? -ne 0; then return 99; fi
   TMP_FILE=/tmp/duper/copy2sd
   cat << EOF > "$TMP_FILE"
   TITLE=$(gettext "Select Source Image")
   MSG=$(gettext "Choose hard disk image to Copy to SD card")
EOF
   image_path=$(selectImage $PARTITION/iiab $TMP_FILE )
   if test $? -ne 0; then return 99; fi
   SRC_DEVICE=$image_path
   SRC_FILE_SIZE=$(ptable_size $image_path)
   WILLITFIT_SRC_SIZE=$SRC_FILE_SIZE
   CHOSEN_SIZE=$SRC_FILE_SIZE
}

selectSDDestinationgh(){
   echo > /tmp/duper/sddevice
   lsblk -o NAME,SIZE,TYPE  | grep disk | grep -v -e sdb -e sda -e zram0 | sort > /tmp/duper/scratch
   cat << EOF > /tmp/duper/sddevice
TITLE=\$(gettext "\"Choose SD card as Destination\"")
MSG=\$(gettext "\"Use care that you do not select the SD card you are copying from. \n\n\n \\
device            size        mounted to\n \\
=================================================================================\"")
DEST=\$(dialog --title "\$TITLE" --clear --ok-label "Select"  \\
 --menu "\$MSG" 20 90 25    \\
EOF
   awk '{ printf("\"%-16s\"  \" %-10s\"  \\\n",$1,$2);}' /tmp/duper/scratch >> /tmp/duper/sddevice
   echo  3\>\&1 1\>\&2 2\>\&3\) >> /tmp/duper/sddevice
   error_msg=$(source /tmp/duper/sddevice)
   if test $? -ne 0 ; then return 99; fi
   DEST_DEVICE=/dev/$(echo $DEST | awk '{print $1}')
   DEST_SIZE=$(fdisk -l $DEST_DEVICE | grep Disk | cut -d" " -f 5)
   WILLITFIT_DEST_SIZE=$DEST_SIZE
   dest_is_file=false
}

################   Top Level Action Routines   ####################
copySD(){
   selectSource
   if test $? -ne 0; then return 99; fi
   selectDestination
   if test $? -ne 0; then return 99; fi
   if [  "$dest_is_file" = "true" ]; then
      createFilename
   fi
   willItFit
   if test $? -ne 0; then return 99; fi
   finalVerification
   if test $? -ne 0; then return 99; fi
   ddCopy
}

makeSmaller(){
   TMP_FILE=/tmp/duper/smaller
   local DEVICE_NIBBLE=$(selectDevice)
   if test $? -ne 0; then return 99; fi
   local DEVICE_MNT=/mnt/$PART_NIBBLE
   local PARTITION=$(selectPartition /dev/$DEVICE_NIBBLE)
   if test $? -ne 0; then return 99; fi
   cat << EOF > "$TMP_FILE"
   TITLE=$(gettext "\"Choose Image to make Smaller\"")
   MSG=$(gettext "\"Must have unused space to be of much use\"")
EOF
   image_path=$(selectImage  $PARTITION/iiab $TMP_FILE )

   # get the proposed new size
   new_size=$(min_device_size $image_path)
   human=$(bytesToHuman $new_size)
   current_size=$(ls -lh $image_path | awk '{print $5}')
   
   TITLE=$(gettext "OK to proceed?")
   MSG=$(gettext "The image file $image_path is currently $current_size. \n
It's new size will be $human. Do you want to proceed?")
   
   dialog --title "$TITLE" --yesno "$MSG" 9 80
   if test $? -ne 0; then return 99; fi

   size_image $image_path
   return 99 
}

image2SD(){
   selectFile   # source returned in CHOICE
   if test $? -ne 0; then return 99; fi
   selectSDDestination
   if test $? -ne 0; then return 99; fi
   willItFit
   if test $? -ne 0; then return 99; fi
   finalVerification
   # doDdCopy
}

deleteImage(){
   TMP_FILE=/tmp/duper/delete
   PART_MOUNT=$(selectPartition )
   PART=$DEST_PARTiTION
   cat << EOF > $TMP_FILE
   TITLE=$(gettext "\"Choose a File to Delete\"")
   MSG=$(gettext "\"Highlight the file you wish to delete\"")
EOF
   image_path=$(selectImage  $PART_MOUNT/iiab $TMP_FILE )
   if test $? -ne 0; then return 99; fi

   TITLE=$(gettext "OK to proceed?")
   MSG=$(gettext "The image file $image_path is about to be deleted. \
Do you want to proceed?")
   
   dialog --title "$TITLE" --yesno "$MSG" 6 80
   if test $? -ne 0; then return 99; fi


   # at boot, the read-only driver loads
   umount $PART_MOUNT
   mount -t ntfs-3g "$PART" "$DEST_MNT"
   echo $image_path | grep iiab  # protection for total hard disk wipeout
   if [ $? -eq 0 ]; then
      rm -f $image_path
   else
      echo "iiab not in full path of delete -- aborting"
      exit 1
   fi
   return 0 
}

#######################   Main Menu   ###############################
mainMenu(){
   choice1=$(gettext "Copy to SD Card or hard disk")
   choice2=$(gettext "Reduce the size of hard disk image")
   choice3=$(gettext "Copy from hard disk image to SD card")
   choice4=$(gettext "Delete hard disk image")
   choice5=$(gettext "Help")
   choice6=$(gettext "Exit to command line terminal")
   title=$(gettext "MAIN MENU")
   msg=$(gettext "\n\nPlease choose from the following options:")
   ACTION=$(dialog --title "$title"  --ok-button Select --cancel-button quit --menu "$msg" 17 80 7   \
   "copysd" "$choice1" \
   "smaller" "$choice2" \
   "image2sd" "$choice3" \
   "delete" "$choice4" \
   "help" "$choice5" \
   "terminal" "$choice6" \
   3>&1 1>&2 2>&3)
   if test $? -ne 0 ; then exit 1 ; fi
   case "$ACTION" in
      copysd) 
         OBJECTIVE=$choice1
         copySD
         ;;
      smaller) 
         OBJECTIVE=$choice2
         makeSmaller
         ;;
      image2sd) 
         OBJECTIVE=$choice3
         image2SD
         ;;
      delete)
         OBJECTIVE=$choice4
         deleteImage
         ;;
      terminal)
         clear
         resume_text=$(gettext "Thank you for using the IIAB duper, You can Copy more SD cards by \
         typing \"duper\".\n\n")
         echo -e $resume_text
         exit 1
         ;;
      help|*)
         usage
         ;;
   esac
}

cleanup(){
   if [ $? -eq 99 ]; then
      if [ ! -z "$error_msg" ]; then
         dialog --title "ERROR" --info $error_msg
         error_msg=
      fi
      trap cleanup EXIT INT TERM
      main
   fi
   umount /mnt/$SRC_DEVICEi &> /dev/null
   if [ "$dest_is_usb" = "true" ]; then
      umount "$DEST_DEVICE" &> /dev/null
   fi
}

main(){
   while true; do
      mainMenu
   done
}

trap cleanup EXIT INT TERM

initialize "$@"
checkSudo "$@"

main "$@"
